import React, { useState, useEffect } from "react";
import { Card, Loader, FormField } from "../components/Index";
import { Link } from "react-router-dom";
import axios from "axios";
import { useQuery } from "@tanstack/react-query";
import { useCallback } from "react";

const RenderCards = ({
  data,
  title,
  activeindex,
  loading,
  openModal,
  closeModal,
}) => {
  console.log(data);
  if (data?.length > 0) {
    return data?.map((post, i) => (
      <Card activeindex={activeindex} key={i} {...post} />
    ));
  } else {
    {
      loading ? null : (
        <h2 className="mt-2 font-bold uppercase text-[#6449ff] text-xl">
          {title}
        </h2>
      );
    }
  }
};
const tabs = [
  {
    tab: "Community",
    active: true,
  },
  { tab: "By Me", active: false },
];

const Home = () => {
  const [posts, setPosts] = useState([]);
  const [searchtext, setSearchText] = useState("");
  const [searchResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [page, setPage] = useState(1);
  const [limit, setLimit] = useState(10);
  const [showloadmore, setShowLoadMore] = useState(false);
  const [activetabindex, setActiveTabIndex] = useState(0);
  console.log(page);
  const GetPosts = useCallback(async ({ page, limit }) => {
    const res = await axios.get(
      `https://dalle-qgms.onrender.com/api/v1/post?page=${page}&limit=${limit}`,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
    console.log(res);
    return res.data;
  }, []);

  const GetPostsQuery = useQuery({
    queryKey: ["monthlymeetings", page],
    queryFn: () => GetPosts({ page, limit }),
  });

  useEffect(() => {
    if (GetPostsQuery?.data?.data) {
      if (page === 1) {
        setPosts(GetPostsQuery?.data?.data);
      } else {
        setPosts([...posts, ...GetPostsQuery?.data?.data]);
      }

      setShowLoadMore(GetPostsQuery?.data?.page?.nextpageexists);
    }
  }, [GetPostsQuery.data]);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);
    setSearchTimeout(
      setTimeout(() => {
        const searchResults = posts?.filter(
          (item) =>
            item.name.toLowerCase().includes(searchtext.toLocaleLowerCase()) ||
            item.prompt.toLowerCase().includes(searchtext.toLocaleLowerCase())
        );
        setSearchedResults(searchResults);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-lg md:text-2xl">
          Aimagen Community Show-Case
        </h1>
        <p className="mt-2 text-[#666e75] text=[16px] max-w-[800px]">
          Download and browser through a collection of imaginative and visually
          stunning AI atr images generated by other users
        </p>
        <div className="flex items-center gap-2 ">
          <p className="mt-2 text-[#666e75] text-[16px] max-w-[800px] ">
            Create, download and share your very own AI images with the AIMAGEN
            community
            {/* <Link
              to="/create-post"
              className="font-inter font-medium bg-[#6469ff] text-white px-4 py-2 pt-2 md:mt-0"
            >
              Create
            </Link> */}
          </p>
        </div>
      </div>

      <div className="mt-10">
        <div className="flex gap-5">
          {tabs.map((tab, i) => {
            return (
              <p
                key={i}
                className={`inline-block border-b-4 cursor-pointer font-semibold text-lg ${
                  i === activetabindex
                    ? "border-blue-500"
                    : "border-transparent"
                }`}
                onClick={() => setActiveTabIndex(i)}
              >
                {tab.tab}
              </p>
            );
          })}
        </div>
        <FormField
          type="text"
          labelName="Search Images"
          name="text"
          placeholder="Search Images by Prompt Keywords"
          value={searchtext}
          handleChange={handleSearchChange}
        />
      </div>
      <div className="mt-10 ">
        <>
          {searchtext && (
            <h2 className="font-medium text-[#666e75] text-xl mb-3 ">
              showing results for <span>{searchtext}</span>
            </h2>
          )}
          <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
            {searchtext ? (
              <RenderCards
                activeindex={activetabindex}
                data={searchResults}
                loading={GetPostsQuery.isLoading}
                title="No search results Found"
              />
            ) : (
              <RenderCards
                activeindex={activetabindex}
                data={posts}
                title="No Posts Found"
              />
            )}
          </div>
          <div className="flex justify-center items-center mt-2 md:mt-5 ">
            {showloadmore ? (
              <button
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full"
                onClick={() => setPage((prev) => prev + 1)}
              >
                Load More
              </button>
            ) : null}
            {GetPostsQuery.isLoading && (
              <div className="flex justify-center items-center">
                <Loader />
              </div>
            )}
          </div>
        </>
      </div>
    </section>
  );
};

export default Home;
